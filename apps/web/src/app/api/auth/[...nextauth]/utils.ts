
import { BackendAccessJWT, DecodedJWT, UserObject } from "next-auth";
import { JWT } from "next-auth/jwt";
import jwt from "jsonwebtoken"
import { JWT_SECRET } from "@/lib/config";
import { v4 as uuidv4 } from "uuid";




export async function refreshAccessToken(nextAuthJWT: JWT): Promise<JWT> {
    try {
        // Get a new access token from backend using the refresh token
        const res = await refresh(nextAuthJWT.data.tokens.refresh);
        const accessToken: BackendAccessJWT = await res.json();

        if (!res.ok) throw accessToken;
        const { exp } = jwt.decode(accessToken.access) as DecodedJWT

        // Update the token and validity in the next-auth object
        nextAuthJWT.data.validity.valid_until = exp;
        nextAuthJWT.data.tokens.access = accessToken.access;
        return nextAuthJWT;
    } catch (error) {
        console.debug(error);
        return {
            ...nextAuthJWT,
            error: "RefreshAccessTokenError"
        };
    }
}


export async function refresh(token: string): Promise<Response> {
    console.debug("Refreshing token");

    if (!token) {
        throw new Error("Token is required");
    }
    // Verify that the refresh token is valid and not expired
    try {
        jwt.verify(token, JWT_SECRET);
    } catch (err) {
        throw new Error("Refresh token expired");
    }


    const payload: UserObject = jwt.decode(token) as DecodedJWT
    const new_access_token: BackendAccessJWT = {
        access: create_access_token(payload)
    };

    return new Response(JSON.stringify(new_access_token), {
        status: 200,
        statusText: "OK",
        headers: {
            "Content-type": "application/json"
        }
    });
}


// Dummy function to create an access token
const create_access_token = (user: UserObject): string => {
    // `iat` and `exp` are generated by the jwt library
    return jwt.sign(
        {
            ...user,
            jti: uuidv4()
        },
        JWT_SECRET
    );
};
